%YAML 1.2
---
name: Kodi Log
file_extensions: [log, LOG]
scope: text.kodilog

contexts:
    main:
        - match: ^([0-9]{2}):([0-9]{2}):([0-9]{2})
          scope: keyword.date
        - match: \b(WARNING)\b
          scope: constant.character.escape
        - match: \b(ERROR)\b
          scope: invalid.illegal
        - match: \b(NOTICE)\b
          scope: entity.name.function
        - match: \b([a-z])+(\.\w+)+[:]
          scope: keyword.control.import
        - match: ([a-z]*):\/\/([\w\-_]+(?:(?:\.[\w\-_]+)+))([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?
          scope: variable.parameter
        - match: '"'
          push: string
        - match: 'EXCEPTION Thrown \(PythonToCppException\) : -->Python callback/script returned the following error<--'
          push: exception
          scope: invalid.illegal
        - match: 'Exception in thread Thread-[0-9].*?'
          push: exception
          scope: invalid.illegal
    string:
        - meta_scope: string.quoted.double
        - match: '"'
          pop: true
        - meta_scope: string.quoted.double
        - match: ^([0-9]{2}):([0-9]{2}):([0-9]{2})
          pop: true


    exception:
        - meta_scope: variable.parameter
        - match: 'Traceback \(most recent call last\):'
          push: traceback_content
        - match: '-->End of Python script error report<--'
          scope: invalid.illegal
          pop: true
        - match: ^([0-9]{2}):([0-9]{2}):([0-9]{2})
          pop: true

    traceback_content:
        - meta_scope: variable.parameter2
        - match: 'File "(.*?)", line (\d*), in (.*)'
          scope: text.kodi.traceback
          captures:
           1: string.quoted
           2: constant.character.escape
           3: storage.type.function
        - match: '(\b(?:[A-Za-z]+)Error: (.*)|SystemExit)$'
          scope: text.kodi.traceback
          captures:
           1: storage.type.function
          pop: true
        - match: ^([0-9]{2}):([0-9]{2}):([0-9]{2})
          scope: text.kodi.traceback
          pop: true
