%YAML 1.2
---
name: KodiSkinXML
file_extensions:
  - xml
first_line_match: '^<\?xml '
scope: text.xml
contexts:
  main:
    # xml header ?
    - match: '(<\?)\s*([-_a-zA-Z0-9]+)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: (\?>)
          pop: true
        - match: " ([a-zA-Z-]+)"
          scope: entity.other.attribute-name.xml
        - include: doublequotedString
    # comments
    - match: "<!--"
      captures:
        0: punctuation.definition.comment.xml
      push:
        - meta_scope: comment.block.xml
        - match: "-->"
          pop: true
    - match: '(<)((?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+))(?=(\s[^>]*)?></\2>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        3: entity.name.tag.namespace.xml
        4: entity.name.tag.xml
        5: punctuation.separator.namespace.xml
        6: entity.name.tag.localname.xml
      push:
        - meta_scope: meta.tag.no-content.xml
        - match: "(>)(<)(/)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)(>)"
          captures:
            1: punctuation.definition.tag.end.xml
            2: punctuation.definition.tag.begin.xml meta.scope.between-tag-pair.xml
            3: punctuation.definition.tag.begin.xml
            4: entity.name.tag.namespace.xml
            5: entity.name.tag.xml
            6: punctuation.separator.namespace.xml
            7: entity.name.tag.localname.xml
            8: punctuation.definition.tag.end.xml
          pop: true
        - include: tagStuff

    # - match: '(</?)(include|variable|constant|color) (name)="([-_a-zA-Z0-9]+)"'
    #   captures:
    #     1: punctuation.definition.tag.begin.xml
    #     2: entity.name.tag.localname.xml
    #     3: entity.other.attribute-name.localname.xml
    #     4: entity.name.function
    #   push:
    #     - meta_scope: meta.tag.xml
    #     - match: (/?>)
    #       captures:
    #         1: punctuation.definition.tag.end.xml.xxx
    #       pop: true
    #     - include: tagStuff
    # - include: entity
    # - include: bare-ampersand

    # xml tags
    - match: "(</?)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)"
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.namespace.xml
        3: entity.name.tag.xml
        4: punctuation.separator.namespace.xml
        5: entity.name.tag.localname.xml
      push:
        - meta_scope: meta.tag.xml
        - match: (/?>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: tagStuff
    - include: entity
    - include: bare-ampersand
    - include: koditranslation
    - include: kodinumber
    - include: kodiinfolabel
    - include: kodivariable
    - include: brackets
    - include: formatter

  bare-ampersand:
    - match: "&"
      scope: invalid.illegal.bad-ampersand.xml

  doublequotedString:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.quoted.double.xml
        - match: '"'
          captures:
            0: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: bare-ampersand
        - include: koditranslation
        - include: kodiinfolabel
        - include: kodivariable
        - include: brackets
        - include: formatter
  entity:
    - match: "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.xml
      captures:
        1: punctuation.definition.constant.xml
        3: punctuation.definition.constant.xml

  tagStuff:
    - match: " (?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9]+)="
      captures:
        1: entity.other.attribute-name.namespace.xml
        2: entity.other.attribute-name.xml
        3: punctuation.separator.namespace.xml
        4: entity.other.attribute-name.localname.xml
    - include: doublequotedString

  koditranslation:
    - match: '(\$)(LOCALIZE)(\[)([0-9]+)(\])'
      name: variable.parameter text.kodi.translation.xml
      captures:
        1: variable.parameter entity.kodi.label.dollar
        2: variable.parameter entity.kodi.label.localize
        3: variable.parameter entity.kodi.label.begin
        4: variable.parameter entity.kodi.label.id
        5: variable.parameter entity.kodi.label.end

  kodinumber:
    - match: '(\$)(NUMBER)(\[)([0-9]+)(\])'
      name: variable.parameter text.kodi.number.xml
      captures:
        1: variable.parameter entity.kodi.number.dollar
        2: variable.parameter entity.kodi.number.number
        3: variable.parameter entity.kodi.number.begin
        4: variable.parameter entity.kodi.number.id
        5: variable.parameter entity.kodi.number.end


  kodiinfolabel:
    - match: '(\$)((?:ESC)?INFO)(\[)'
      name: variable.parameter text.kodi.infolabel.xml
      captures:
        1: entity.kodi.infolabel.dollar
        2: entity.kodi.infolabel.localize
        3: entity.kodi.infolabel.begin
      push:
        - meta_scope: support.function
        - match: '(\])'
          captures:
            1: entity.kodi.infolabel.end
          pop: true
        - include: koditranslation
        - include: formatter
        - include: brackets

  formatter:
    - match: '(\[)([A-Za-z0-9\/= ]*?)(\])'
      name: invalid.deprecated
      captures:
        '1': kodi.formatter.begin invalid.deprecated
        '2': kodi.formatter.content invalid.deprecated
        '3': kodi.formatter.end invalid.deprecated

  kodivariable:
    - match: '(\$)((?:ESC)?VAR)(\[)'
      name: variable.parameter text.kodi.variable.xml
      captures:
        1: entity.kodi.variable.dollar
        2: entity.kodi.variable.localize
        3: entity.kodi.variable.begin
      push:
        - meta_scope: storage.type
        - match: '(\])'
          captures:
            1: entity.kodi.variable.end
          pop: true
        - include: formatter

  brackets:
    - match: '(\()([A-Za-z0-9._,]*?)(\))'
      name: constant.numeric
      contentName: invalid.function
      captures:
        '2': constant.other.allcaps

  # brackets:
  #   - match: \(
  #     push: closingbracket
  #   - match: \)
  #     scope: invalid.illegal.stray-bracket-end

  # closingbracket:
  #   - meta_content_scope: constant.other.allcaps
  #   - match: \)
  #     pop: true
  #   - include: brackets
